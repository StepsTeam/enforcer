use crate::state::{Train}; 
use crate::debug::{watch}; 

// The DEBUG_SARIF_RULES constant is commented out here because
// SARIF rules are now generated by build.rs into `static_sarif_rules.rs`
// and included in `main.rs`, making them globally available as `crate::SARIF_RULES`.
// Keeping it here would lead to duplicate definition errors.
// const DEBUG_SARIF_RULES: &str = include_str!("config/debug_rules.sarif");

/// configure_debug()
/// - Sets up the DEBUG module metadata in train.tool
/// - Logs watch entries for function start and tool configuration
/// - Returns the updated train object
pub fn configure_debug(mut train: Train) -> Train { // Correctly accepts and returns Train
    // Log function start
    train.watch.level = 3; // Accessing the new 'level' field in Watch
    train.watch.message = "configure_debug:".to_string(); 
    train = watch(train); // Assuming watch() is updated to take/return Train

    // Access `train.tool` directly, which is now a `Tool` struct
    train.tool.tool_name = "debug".to_string(); 

    // Set debug_level to filter log messages
    train.tool.debug_level = 10; // Accessing the new 'debug_level' field in Tool

    // Log the configured tool name
    train.watch.level = 5; // Accessing the new 'level' field in Watch
    train.watch.message = format!(
        "train[tool][tool_name] = {}",
        // Access the String field directly from the Tool struct
        &train.tool.tool_name
    );
    train = watch(train); // Assuming watch() is updated to take/return Train

    train
}
